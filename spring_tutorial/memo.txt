★★モデル★★

=======User.java(エンティティ)==========

//このファイルの役割：クラスファイルを接続したいDBのテーブルと対応付けること。

//javaファイルをエンティティとして扱うこと。
@Entity 

//@Table(name = "DBと対応付けたいファイル名(拡張子は除外)"。
@Table(name = "users")

//@Data: lombokというエンティティのゲッター・セッターを自動生成してくれるライブラリをインストールすること。
@Data

//@Id: 一意認識の主キーを表す
@Id 

//GenerationType.IDENTITYとつくと、そのカラムはAUTO_INCREMENTと同等の処理になる
@GeneratedValue(strategy = GenerationType.IDENTITY)

//@Column: フィールドにデータベースのカラムを紐づける
@Column(name = "user_id") 
private Integer userId;
	
@Column(name = "user_name")
private String userName;
	
@Column(name = "password")
private String password;
	
@Column(name = "role_id")
private Integer roleId;
	

=======UserRepository.java(リポジトリ)==========
//このファイルの役割：エンティティとサービスの橋渡し役をすること。

//～～中略～～


//JpaRepository<エンティティを扱うクラスファイル名, 左記ファイルの主キーのデータ型>
public interface UserRepository extends JpaRepository<User, Integer> {
	public interface UserRepository {
    // ユーザー名で完全一致検索
    List<User> findByUserName(String userName);
}

=======UserService.java(サービス)==========

//～～中略～～

@Service
public class UserService {

	//リポジトリインターフェースをフィールドとして宣言
	private final UserRepository userRepository;
	
	//依存性の注入(DI)を行う(コンストラクタインジェクション)
	//フィールドとして定義したリポジトリインターフェースを引数にして、コンストラクタを使ってインスタンスを作成。
	public UserService(UserRepository userRepository) {
		this.userRepository = userRepository;
	}
	
	//新規ユーザの登録メソッド
	//コントローラを挟んでユーザ(ビュー)から渡されたデータを基に登録するメソッド
	public void createUser(String userName, String password, int roleId) {
		
		//ユーザ名の未入力チェック(空欄はNG)
		if(userName == null || userName.isEmpty()) {
			throw new IllegalArgumentException("ユーザ名を入力してください。");
		}
		
		
		//ユーザ名の重複チェック(完全一致はNG)
		if(!userRepository.findByUserName(userName).isEmpty()) {
			throw new IllegalArgumentException("そのユーザ名は既に使用されています。");
		}
		
		//ユーザの登録用のエンティティを作成
		User user = new User();
		
		user.setUserName(userName);
		user.setPassword(password);
		user.setRoleId(roleId);
		
		//ユーザの登録
		//サービスを扱うクラスのインスタンス(=userRepository)にリポジトリクラスのメソッド(save() )を適用
		userRepository.save(user);
		
	}
	
	//JPAのリポジトリインターフェースで提供される標準メソッドを使用して、登録されたレコードを確認する。
	//戻り値の型はList<エンティティクラス名>となる。
	public List<User> getAllUsers() {
		return userRepository.findAll();
	}
}

★★コントローラ★★

//～～中略～～

//サービス(モデル)を介してユーザリストを対象のビューページに送信
//DBに登録される(された)ユーザリストをビュー側で表示できるようにする処理(バックエンド→フロントエンドへのデータ受け渡し)

@Controller
public class AdminUserController {
    private final UserService userService;
    
	//コントローラからサービスのインスタンスを介してサービスを使用する
	//→リポジトリを依存性の注入によって呼び出しているサービスを、コントローラが依存性の注入によって呼び出している。
    public AdminUserController(UserService userService) {
        this.userService = userService;
    }

    @GetMapping("/adminuser")
    
    //ビューにコントローラからデータを渡す場合、モデルインターフェース(データの一時的な置き場)を使用する。
    public String adminUser(Model model) {
        //DIによって呼び出したサービスを使用して、最新のユーザーリストを取得
        List<User> users = userService.getAllUsers();

        // ビューにユーザーリストを渡す
        model.addAttribute("users", users);

		//ユーザリストを渡したいビューページを指定
        return "adminUserView";
    }
    
   //ユーザ登録フォームにて「登録」ボタンを押下し、ユーザリストに追加されるようにする処理
    
   //ビュー側とAPIのエンドポイントとして決めた窓口(/register)へデータベースの処理を戻している(コントローラ→ビュー)
    @PostMapping("/register")
    public String registerUser(RedirectAttributes redirectAttributes,
            @RequestParam("user_name") String userName,
            @RequestParam("password") String password,
            @RequestParam("role_id") int roleId) {

        try {
            // リクエストパラメータからのデータを用いてユーザー登録
            userService.createUser(userName, password, roleId);

            // 登録成功時は完了メッセージをビューに受け渡す
            redirectAttributes.addFlashAttribute("successMessage", "ユーザー登録が完了しました。");

        } catch (IllegalArgumentException e) {
            // 登録失敗時はエラーメッセージをビューに受け渡す
            redirectAttributes.addFlashAttribute("failureMessage", e.getMessage());

            // 再表示用の入力データをビューに受け渡す（パスワードは除く）
            redirectAttributes.addFlashAttribute("userName", userName);
            redirectAttributes.addFlashAttribute("roleId", roleId);
        }

        // adminuserにリダイレクトしてリストを再表示
        return "redirect:/adminuser";
    }
}

























